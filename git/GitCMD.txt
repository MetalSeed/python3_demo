# repo init
git init


# repo commit
git add .
git commit -m "str"


# commit status
git status


# code version
git log
git reflog


# code backtrack
git reset --hard HEAD^
git reset --hard commit_id

//
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
//

# add remote repository, remove a remote repo
git remote add origin git@github.com:MetalSeed/xxxxx.git
git remote rm origin

# git clone a repository from remote
git clone git@github.com:MetalSeed/xxxxx.git
git clone git@github.com:MetalSeed/xxxxx.git myrepo

# push to remote
git push -u origin master # set the default path to push 
git push origin master
git push # push the remote-tarcking branch

# fetch from remote
git fetch origin #fetch all branch
git fetch origin master #fetch the branch

# list branch
git branch -r #remote
git branch -a #all branch

# merge origin/master & master
git merge origin/master

# pull from remote = fetch & merge
git pull # pull the remote-tracking branch
git pull origin master:master #git pull <remoterepo> <branch>:<localrepo>
git pull origin master #= git fetch origin  git merge origin/master
git pull origin


# other
git remote -v
git remote rm git@github.com:MetalSeed/xxxxx.git

